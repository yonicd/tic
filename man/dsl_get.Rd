% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dsl-storage.R
\name{dsl_get}
\alias{dsl_get}
\alias{dsl_load}
\alias{dsl_init}
\title{Storage for stages and steps}
\usage{
dsl_get()

dsl_load(path = "tic.R", force = FALSE, quiet = FALSE)

dsl_init(quiet = FALSE)
}
\arguments{
\item{path}{\code{[string]}\cr
Path to the stage definition file, default: \code{"tic.R"}.}

\item{force}{\code{[flag]}\cr
Set to \code{TRUE} to force loading from file even if a configuration exists.
By default an existing configuration is not overwritten by \code{dsl_load()}.}

\item{quiet}{\code{[flag]}\cr
Set to \code{TRUE} to turn off verbose output.}
}
\value{
A named list of opaque stage objects with a \code{"class"} attribute
and a corresponding \code{\link[=print]{print()}} method for pretty output.
Use the high-level \code{\link[=get_stage]{get_stage()}} and \code{\link[=add_step]{add_step()}} functions to configure,
and the \link{stages} functions to run.
}
\description{
Stages and steps defined using tic's \link{DSL} are stored in an
internal object in the package.
The stages are accessible through \code{dsl_get()}.
When running the \link{stages}, by default a configuration defined
in the \code{tic.R} file is loaded with \code{dsl_load()}.
See \code{\link[=use_tic]{use_tic()}} for setting up a \code{tic.R} file.

For interactive tests, an empty storage can be initialized
with \code{dsl_init()}.
This happens automatically the first time \code{dsl_get()} is called
(directly or indirectly).
}
\examples{
dsl_init()
dsl_get()

dsl_load(system.file("templates/package/tic.R", package = "tic"))
dsl_load(system.file("templates/package/tic.R", package = "tic"), force = TRUE)
dsl_get()
}
